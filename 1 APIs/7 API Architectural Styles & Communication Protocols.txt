1. API Ünsiyyət və Protokollar (Communication Styles & Protocols)

Bunlar API-lərin işləmə üsulu və məlumat mübadiləsi standartlarıdır:

1) REST API
2) RESTFUL API 
3) HTTP 
4) SOAP 
5) GRAPHQL 
6) WEBSOCKET 
7) RPC (grpc, trpc) 
8) AsyncAPI 
9) Falcor
10) OData (Open Data Protocol) 
11) JSON-RPC 
12) XML-RPC 
13) HATEOAS (Hypermedia as the Engine of Application State) 
14) Webhooks 
15) AMQP (Advanced Message Queuing Protocol) 
16) MQTT (Message Queuing Telemetry Transport) 
17) Server-Sent Events (SSE) 
18) Thrift 
19) Avro 
20) CORBA (Common Object Request Broker Architecture) 




Bizim sadaladığımız bu texnologiyaların hamısı “API ünsiyyəti və məlumat mübadiləsi” üçün nəzərdə tutulub, 
amma eyni məqsəd üçün deyillər. Onlar müxtəlif dövrlərdə, müxtəlif ehtiyacları qarşılamaq üçün yaranıb və 
hər birinin üstün və zəif tərəfləri var. Təbii ki, hamısını bilmək məcbur deyildir. 

Qısaca bu API texnologiyalarının nə üçün istifadə edildiyi haqqında burada yazacam ancaq bir neçəsi ilə daha 
yaxından tanış olub praktika edəcəyik.





------------------------------------------------------------------------------------------------------------------

1. REST API
    - REST API sadəcə REST prinsiplərinə qismən əməl edir. Yəni hər qaydanı tam yerinə yetirməyə bilər.
    - Daha sərbəstdir. Misal: Məktəbdə müəllim tapşırıq verir, sən isə qaydaların bəzilərinə əməl edirsən, amma hamısına yox.
    - Təsəvvür elə, dostuna məktub yazırsan: “Salam, mənə 1-ci istifadəçinin məlumatını göndər”.
    - Bu məktubu hər kəs eyni qayda ilə yazır.
    - REST API → Kompüterlərin bir-birinə məktub göndərməsi üçün sadə qaydalar toplusudur.    

İstifadə olunur:
    - Kiçik, sadə layihələrdə.
    - Prototiplərdə (tez bir şey hazırlamaq lazım olanda).
    - Çox da qaydaları ciddi izləməyə ehtiyac olmayanda.


------------------------------------------------------------------------------------------------------------------

2. RESTful API
    - Bu sadəcə REST API qaydalarına tam əməl edən API deməkdir.
    - Yəni müəllim “dərslikdəki qaydanı tam düzgün yaz” deyəndə olduğu kimi.
    - REST-in bütün qaydalarına əməl edir:
    - Stateless (hər request müstəqildir, yaddaş saxlamır),
    - HTTP metodlarını düzgün istifadə edir (GET, POST, PUT, DELETE),
    - URL-lər resurs əsaslı olur (məsələn: /products/15/orders/3).
    - Daha ciddi, standart və qaydalı sistemdir.

İstifadə olunur:
    - Böyük sistemlərdə (bank, e-commerce, enterprise sistemlər).
    - Çoxlu istifadəçi və böyük trafik olanda.
    - Konsistensiya (sabitlik) və təhlükəsizlik vacib olanda.

------------------------------------------------------------------------------------------------------------------


3. HTTP
    - HTTP – internetdə müştəri (client) ilə server arasında danışıq qaydasıdır.
    - Client (məsələn: brauzer, mobil tətbiq) → sorğu göndərir.
    - Server (məsələn: saytın və ya API-nin arxa tərəfi) → cavab qaytarır.
    - API-lər də bu HTTP qaydaları ilə işləyir.
    - Yəni HTTP API-lərin dili və qaydasıdır: “sorğu göndər → cavab al.”


------------------------------------------------------------------------------------------------------------------

4. SOAP nədir?
    - SOAP — Simple Object Access Protocol deməkdir.
      Bu, müştəri ilə serverin danışmaq qaydasıdır, amma çox rəsmi və qaydaları ağır bir dildir.


Xüsusiyyətləri

a) XML-dən istifadə edir 
    - Yəni göndərilən və alınan məlumat həmişə XML formatında olur. (XML haqqında, sonra nümunə yazdıqda izah edəcəm)
    - JSON və s. işlətmək olmur.

b) Dil asılılığı yoxdur 
    - Müştəri Java-da, server C#-da ola bilər. Fərqi yoxdur.
    - Çünki SOAP standartları hər yerdə eynidir.

c) Protokol sərbəstliyi 
    - Təkcə HTTP yox, TCP, UDP, SMTP üzərindən də işləyə bilir.

d) Çox təhlükəsizdir 
    - Güclü təhlükəsizlik standartları var.
    - Banklar, hökumət sistemləri kimi çox həssas məlumat olan yerlərdə istifadə olunur.

e) Öz kodları var
    - REST-də HTTP status kodları (200, 404, 500) işlənir.
    - SOAP isə öz error kodlarını işlədə bilir.


Sadə Misal (məktəb nümunəsi ilə)
    - Təsəvvür et müəllim sinfə çox rəsmi qaydalarla tapşırıq verir:
    - “Şagirdlər, adınızı bu şəkildə, soyadınızı o şəkildə, tarix formatını belə yazmalısınız.”
    - Heç bir qaydanı poza bilməzsən.
    - Bu, SOAP kimidir: hər şey çox rəsmi, standart və uzun-uzadı yazılmalıdır.
    - REST isə daha rahatdır: sadəcə “mənə şagird siyahısını ver” demək kifayətdir.


------------------------------------------------------------------------------------------------------------------


5. GraphQL nədir?

GraphQL — Facebook mühəndisləri tərəfindən hazırlanmış API yaratmaq üsuludur.
REST və SOAP-un alternativi kimi düşünüblər.

Əsas məqsədi:
    - Müştəriyə lazım olan dəqiq məlumatı vermək.
    - Artıq məlumat yollamamaq.




Sadə Misal (restoran nümunəsi ilə)
    - REST API-də: “Menyu ver” deyirsən → sənə bütün menyunu gətirirlər (artıq məlumat da çoxdur).
    - GraphQL-də: “Mənə sadəcə kartof və kotlet ver, sous lazım deyil” deyirsən → sənə yalnız kartof və kotlet gətirilir.

⚡ Yəni:
    - REST → çox vaxt həm lazım olan, həm lazım olmayan məlumat gəlir.
    - GraphQL → yalnız istədiyin məlumatı seçib götürürsən.


GraphQL-in üstünlükləri

1) Dəqiq məlumat sorğusu 🥇
    - Müştəri özü seçir nə lazımdır, nə lazım deyil.

2) Bir sorğuda çoxlu məlumat 🔗
    - REST-də bəzən eyni məlumatı toplamaq üçün 3-4 sorğu göndərməlisən.
    - GraphQL-də hamısını bir sorğuda istəyə bilərsən.

3) Dillərdən asılı deyil 🌍
    - GraphQL bir spesifikasiyadır, yəni qaydalar toplusu.
    - İstənilən proqramlaşdırma dilində işlətmək olar (PHP, JS, Python, Java və s.).

4) Alətlər dəstəyi ⚙️
    - GraphiQL kimi vizual alətlər var → yazdığın sorğunu görüb dərhal test edə bilirsən.

5) Schema əsaslıdır 📐
    - Sənin API-nin tip sistemi var (məsələn: Product tipi, User tipi).
    - Bu sayədə validasiya və introspeksiya mümkündür (yəni sorğuda səhv yazsan, əvvəlcədən xəbərdarlıq edilir).




PHP-də GraphQL (graphql-php)
    - PHP üçün graphql-php kitabxanası var.
    - Bu kitabxana Facebook-un orijinal JavaScript implementasiyasına əsaslanıb.
    - O, sənin mövcud biznes məntiqinə və verilənlər bazana sadəcə “API təbəqəsi” əlavə edir.

Xüsusiyyətləri:
    - Tip sistemi yaratmaq imkanı.
    - Sorğuları parse etmək və icra etmək.
    - Səhv idarəetməsi (query validation, execution errors).
    - Async PHP dəstəyi (Promises).
    - Mövcud framework-lərlə inteqrasiya.

------------------------------------------------------------------------------------------------------------------



6. WebSocket nədir?
    - WebSocket – internetdə iki tərəfli canlı danışıq üsuludur.
    - Normal HTTP-də: Müştəri (brauzer) → serverə sorğu göndərir, server cavab verir. Bitdi.
    - WebSocket-də: Bağlantı açıldıqdan sonra həm müştəri, həm də server istədiyi vaxt mesaj göndərə bilir.
    - Bu, elə bil telefon danışığı kimidir. Hər iki tərəf eyni anda danışa və eşidə bilir.


Əsas Xüsusiyyətləri

a) Full-duplex (iki tərəfli ünsiyyət) 🔄
    - Həm client, həm də server eyni anda mesaj göndərə bilər.

b) Persistent Connection (davamlı bağlantı) 🔌
    - HTTP-də hər dəfə sorğu açılır və bağlanır.
    - WebSocket-də bir dəfə “əl sıxışma” (handshake) olur və əlaqə davamlı açıq qalır.

c) Çox sürətli və az gecikmə ⚡
    - Çünki hər dəfə yeni bağlantı açmaq lazım olmur.
    - Real-time oyun, chat, canlı bildirişlər üçün idealdır.



Harada istifadə olunur?
    - Chat proqramları (WhatsApp Web, Messenger) 💬
    - Online oyunlar 🎮
    - Canlı bildirişlər 🔔 (məsələn, Facebook notification)
    - Canlı məlumat axını 📈 (birja qiymətləri, idman nəticələri, IoT cihazları)
    - Collaborative tools (Google Docs – eyni sənədi birdən çox adam düzəldir)




PHP və WebSockets
    - PHP əvvəlcə request-response üçün yaradılmışdı (yəni HTTP sorğu gəlir → cavab gedir → script bitir).
    - Bu, WebSocket üçün uyğun deyildi, çünki WebSocket uzun müddət açıq qalan əlaqə tələb edir.

Amma sonradan PHP ekosistemi böyüdü və indi xüsusi kitabxanalar var:
    - Ratchet (ən məşhur PHP WebSocket kitabxanası)
    - ReactPHP (event-loop əsasında)
    - Swoole (çox yüksək performanslı extension)
    - Pusher (xidmət kimi WebSocket dəstəyi)

Bunların köməyi ilə PHP-də də real-time tətbiqlər yazmaq mümkündür.



------------------------------------------------------------------------------------------------------------------

7. 


RPC (Remote Procedure Call) nədir?
    - RPC → Uzaqdakı kompüterdəki funksiyanı sanki öz kompüterindəymiş kimi çağırmaq deməkdir.

    - Təsəvvür elə, evdə oturubsan və uzaq otaqda bir düymə var.
    - Sən o düyməni basırsan və iş görülür.
    - Hər şey elə bil sənin otağında baş verir, amma əslində uzaqda baş verir.





gRPC (Google RPC)
    - Google tərəfindən hazırlanıb, 2015-ci ildə açıq qaynaq oldu.
    - HTTP/2 və Protobuf (xüsusi sürətli məlumat formatı) istifadə edir.
    - Çox sürətlidir, az məlumat göndərir, real-time üçün uyğundur.
    - Mikroservislər və böyük sistemlər üçün idealdır.
    - Hər hansı proqramlaşdırma dili ilə işləyə bilir.

    - Böyük şirkət kimi düşün: Netflix və Uber kimi böyük sistemlərdə, fərqli kompüterlər sürətlə və düzgün ünsiyyət qurur.
    - gRPC → uzaq funksiyanı tez və etibarlı çağırmaq üçün.





tRPC (TypeScript RPC)
    - 2020-ci ildə hazırlanıb, TypeScript üçün dost RPC.
    - JSON formatında işləyir, frontend ilə asan inteqrasiya olur (React, Next.js).
    - Type-safe → səhv tipdə məlumat göndərmək olmur.
    - API client avtomatik yaranır, manual kod yazmağa ehtiyac qalmır.
    - Server-side caching və authentication daxildir.

    - Sənin TypeScript layihəndə uzaqdakı funksiyanı çağırmaq heç bir əlavə kod yazmadan, elə bil öz lokal funksiyanı çağırırsan.





------------------------------------------------------------------------------------------------------------------

8. AsyncAPI nədir?
    - AsyncAPI → hadisələri (events) idarə etmək və sənədləşdirmək üçün standartdır.
    - Yəni bir şey baş verdikdə (event), başqa bir sistem və ya proqram onun haqqında xəbərdar olur.
    - Bu xəbərdarlıq ** dərhal cavab gözləmədən** gedir.


    - Təsəvvür elə, atəşfəşanlıq zamanı “bum!” olur → işıq yanır, musiqi başlayır.
    - Burada bum! → hadisə (event)
    - İşıq və musiqi → hadisəyə cavab verən sistem
    - Sən cavab gözləmirsən, sadəcə hadisə baş verir və digər sistemlər reaksiya göstərir.
    - AsyncAPI → Bu hadisələrin necə işlədiyini sənədləşdirir, kim nəyi görməli, nə etməli, hamısını göstərir.



Texniki Sadə Misal
    - Rest API → sorğu göndərirsən, cavab gəlir.
    - Async API → “Bilin ki bir hadisə baş verdi”, cavab gözləmirsən.

Restauran misalı:
    - Aşpaz yeməyi bişirir.
    - Garson menyuya baxıb masalara yeməyi çatdırır.
    - Aşpaz garsondan cavab gözləmir → sadəcə yeməyi hazır edir.

AsyncAPI → garson və aşpaz arasında bu prosesi sənədləşdirir, kim nəyi necə almalı, hansı məlumat lazımdır göstərir.


Qısa nəticə:
    - AsyncAPI → event-based sistemləri idarə edən sənəd standartıdır.
    - Synchronous API → sorğu-cavab (məsələn REST, GraphQL).


------------------------------------------------------------------------------------------------------------------

9. Falcor
    - Netflix-in yaratdığı texnologiya.
    - Sanki uzaq kompüterdəki məlumatları elə bil sənin kompüterindəymiş kimi göstərir.
    - Yəni uzaqdakı kitabxanadakı kitabı elə oxuyursan ki, guya evindədir.

------------------------------------------------------------------------------------------------------------------

10. OData nədir?

OData (Open Data Protocol) – bu, məlumatlara sorğu vermək üçün hazırlanmış standart qaydalar kitabçasıdır. 
Sadə desək, o, serverdən məlumatları almağın və göndərməyin bir “sözlüyü” və ya qaydalar toplusu kimidir.

Məsələn, sən deyirsən: “Mən bütün istifadəçilərin adını götürmək istəyirəm.”

OData ilə sən bunu standart və eyni qaydada yaza bilərsən, hər dəfə müxtəlif üsullar icad etməyə ehtiyac yoxdur.




OData-nın üstünlükləri

a) Standartlaşmış URL-lər:
    - Məlumatları soruşmaq üçün URL-lər (linklər) standartdır, yəni hər kəs eyni formada məlumat ala bilər.

b) Fokus biznes loqikasına:
    - OData sənə API yaratmaqda texniki detallar (HTTP status kodları, media tip, query parametrlər) ilə məşğul olmadan 
      birbaşa biznes məntiqinə diqqət etməyə imkan verir.

c) Asan istifadə:
    - OData metadata (məlumat modeli təsviri) sayəsində generik alətlər və hazır client kitabxanaları ilə sürətlə işləmək olur.

d) Front-end inkişafını sürətləndirir:
    - Məsələn, hazır kitabxanalar Kendo UI və ya OpenUI5 OData ilə işləyə bilir. Bu, deməkdir ki, sən saatlarla frontend 
      çərçivəsi qura bilərsən və yalnız xüsusi biznes loqikasını əlavə edirsən.




Niyə PHP-də OData az istifadə olunur?
    - PHP icmasında OData çox populyar deyil, çünki çox az resurs və kitabxana var.
    - Server tərəfi (data verən) və client tərəfi (data alan) komponentlərini düzgün qurmaq biraz çətindir.
    - Amma əgər sən Microsoft və .NET ekosistemində işləyirsənsə, OData çox rahatdır və sürətli inkişaf üçün faydalıdır.



------------------------------------------------------------------------------------------------------------------


11. JSON-RPC

Sadə mesaj qutusu kimidir.
    - Məktublar JSON formatında yazılır (sadə sözlərlə, oxunması rahatdır).
    - Serverə sorğu göndərirsən → cavab alırsan, amma bütün bunlar standart və eyni qaydada olur.


Niyə JSON-RPC 2.0?
    - Standartdır: Hamı eyni qaydada işləyə bilir.
    - Kitabxanalar mövcuddur: PHP, Python, JavaScript və mobil platformalar üçün.
    - Yüngül və sürətlidir: XML-RPC və SOAP qədər mürəkkəb deyil.
    - Xəta emalı daxildir: Cavab düzgün qurulubsa, xəta olduqda avtomatik xəbər verir.
    - Çoxlu sorğuları birləşdirmək olur: Bir neçə HTTP sorğusunu birləşdirib göndərə bilərsən.
    - API üçün tək nöqtə: Məsələn, /rpc-server.php bütün metodları idarə edə bilər.
    - İsimlənmiş və opsional parametrlər: Funksiyalara parametr verərkən rahatlıq verir.
    - Sadə desək: JSON-RPC sənin serverlə danışmaq üçün hazırlanmış sadə məktublar qutusudur, hər şey JSON formatında və standart qaydada olur.


------------------------------------------------------------------------------------------------------------------

12. XML-RPC nədir?
    - XML-RPC JSON-RPC-ın köhnə versiyası kimi düşünsək olar.
    - Məktublar XML formatında yazılır (bu biraz daha mürəkkəbdir).
    - Vaxtilə çox istifadə olunub, amma JSON-RPC daha yüngül və sadə olduğu üçün indi daha çox yayılıb.

------------------------------------------------------------------------------------------------------------------


13. HATEOAS
    - Təsəvvür elə, kitab oxuyursan, səhifənin aşağısında “davamı üçün səhifə 57-yə bax” yazılıb.
    - HATEOAS → API-lər də cavablarında “növbəti addımı buradan et” deyə linklər verirlər.


Hipermedia nədir?

Hipermedia sadəcə məlumat (mətn) deyil, həm də:
    - linklər,
    - düymələr,
    - keçidlər,
    - tablar (vərəqlər),
    - şəkillər və s.

Bunlar sənə “buradan sonra nə edə bilərsən” sualına cavab verir.

Məsələn, sən GitHub-da bir repozitoriya açırsan:
    - “Clone” düyməsi → kodu köçürməyə imkan verir.
    - “Download” düyməsi → faylı yükləməyə imkan verir.
    - “Issues” tabı → problemlər siyahısını açır.

Yəni hipermedia sənə hansı addımları ata biləcəyini göstərir.


API-də HATEOAS necə işləyir?
    - Adi REST API-də server sadəcə məlumatı qaytarır.
    - HATEOAS olan REST API-də isə server məlumatla yanaşı növbəti edilə biləcək hərəkətlərin linklərini də göndərir.






HATEOAS olmadan:
    {
        "id": 1,
        "name": "Book A"
    }




HATEOAS ilə:
    {
        "id": 1,
        "name": "Book A",
        "links": [
            { "rel": "self",   "href": "/books/1" },
            { "rel": "update", "href": "/books/1/update" },
            { "rel": "delete", "href": "/books/1/delete" }
        ]
    }

Burada server deyir:
    - bu kitabın öz səhifəsi var,
    - yeniləmək olar,
    - silmək olar.






------------------------------------------------------------------------------------------------------------------


14. Webhooks
    - Dostun sənə mesaj atır: “Mən işimi bitirdim”.
    - Yəni sən gözləmirsən, o bitirəndə özbaşına xəbər verir.
    - Webhooks → Başqa sistem sənə özü xəbər göndərir.


------------------------------------------------------------------------------------------------------------------


15. AMQP – Böyük poçt ofisi
    - Böyük şirkət və banklar üçün istifadə olunur.
    - Mesajlar düzgün yerə çatdırılır, heç itmir.
    - Mürəkkəbdir, amma çox güvənlidir.

AMQP → Böyük, güvənli poçt sistemi.


------------------------------------------------------------------------------------------------------------------

16. MQTT – Kiçik poçt qutusu
    - Kiçik cihazlar üçün nəzərdə tutulub: ağıllı lampalar, temperatur sensorları və s.
    - Mesajlar tez və sadə çatır.
    - İstifadəsi çox asandır, amma çox mürəkkəb işləri görmür.

MQTT → Kiçik, yüngül və sürətli poçt sistemi.

------------------------------------------------------------------------------------------------------------------


17. Server-Sent Events (SSE)
    - Radio dinləyirsən, musiqi özü gəlir, sən sadəcə qulaq asırsan.
    - SSE → Server daim məlumat göndərir, sən sadəcə qəbul edirsən.


------------------------------------------------------------------------------------------------------------------


18. Thrift
    

Thrift – Facebook-un yaratdığı bir alətdir ki, müxtəlif dillərdə yazılmış proqramların bir-biri ilə ünsiyyət qurmasına kömək edir.

Onu belə başa düşmək olar:
    - Bir proqram Python-da yazılıb.
    - Digəri PHP-də yazılıb.
    - Üçüncüsü Java-da yazılıb.

Normalda bunlar bir-birini başa düşmür. Amma Thrift araya girib tərcüməçi rolunu oynayır.



Thrift necə işləyir?

a) Əvvəlcə sən xidmətin (service) qaydalarını yazırsan. Məsələn:
    - Mənim kalkulyator xidmətim var, onun topla() və çıx() funksiyası var.
    - Bu qaydaları IDL (Interface Definition Language) deyilən xüsusi sadə dildə yazırsan.

b) Sonra Thrift həmin qaydaları istədiyin proqramlaşdırma dilinə çevirir.
    - Python kodu alırsan.
    - PHP kodu alırsan.
    - Java kodu alırsan.


Thrift nə üçün lazımdır?
    - Müxtəlif dillərdə yazılmış sistemlərin asanca danışması üçün.
    - Böyük şirkətlərdə (məsələn, Facebook, Twitter) mikroservislər çox olur və onlar fərqli dillərdə yazılır. Thrift onları birləşdirir.
    - Çox sürətli və yüngül işləyir, çünki məlumatı JSON və ya XML kimi ağır formatlarda yox, daha yığcam formada ötürür.



Sadə misal (real həyatdan)
    - Tutaq ki, sən beynəlxalq bir konfransa getmisən.
    - Azərbaycanlı, ingilis, türkiyəli və alman proqramçılar var.
    - Hər kəs öz dilində danışır.
    - Normalda bir-birini başa düşmürlər.


------------------------------------------------------------------------------------------------------------------


19. Avro nədir?

Avro (Apache Avro) – məlumatı saxlamaq və ötürmək üçün xüsusi bir formatdır.
Sadə dillə desək, çox böyük məlumatı kiçik qutulara yerləşdirməyin üsuludur.

O, əsasən Big Data (Böyük verilənlər) sahəsində – məsələn, Hadoop ekosistemində istifadə olunur.


Data sıxılmış formada yazılır (yəni sahələrin adları yazılmır). Beləliklə, çoxlu məlumat az yer tutur : ["Aysel", 15, "9B"]


Avro-nun xüsusiyyətləri:

    a) Çoxlu məlumat tiplərini dəstəkləyir
        - Sadə: int, string, boolean, float, double...
        - Mürəkkəb: record, enum, array, map, union, fixed

    b) Schema evolyusiyası
        - Sonradan məlumat bazasına yeni sahə əlavə etsən, köhnə məlumatlarla problem olmur.

    c) Köhnə schema ilə yazılmış məlumat yeni schema ilə də oxuna bilir.
        - Kompatibilik (uyğunluq)
        - Müxtəlif proqramlar fərqli schema versiyalarından istifadə etsə də, bir-biri ilə danışa bilir.



Harada istifadə olunur?
    - Big Data texnologiyalarında (Hadoop, Kafka, Spark).
    - Çox böyük log fayllarını saxlamaq.
    - Sistemlər arasında sürətli və yığcam məlumat mübadiləsi.



------------------------------------------------------------------------------------------------------------------


20. CORBA
        - Çox köhnə universal tərcüməçi.
        - Əvvəllər çox istifadə olunurdu, amma indi demək olar ki, ölüb.


------------------------------------------------------------------------------------------------------------------